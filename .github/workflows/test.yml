name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  checks:
    timeout-minutes: 5
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # pseudo-matrix for convenience, NEVER use more than a single combination
        node: [18]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: install pnpm
        shell: bash
        run: |
          PNPM_VER=$(jq -r '.packageManager | if .[0:5] == "pnpm@" then .[5:] else "packageManager in package.json does not start with pnpm@\n" | halt_error(1)  end' package.json)
          echo installing pnpm version $PNPM_VER
          npm i -g pnpm@$PNPM_VER
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      - name: install
        run: |
          pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
      - name: format
        run: pnpm check:format
      - name: lint
        if: ${{ !cancelled() }}
        run: pnpm check:lint
      - name: types
        if: ${{ !cancelled() }}
        run: pnpm check:types
      - name: publint
        if: ${{ !cancelled() }}
        run: pnpm check:publint
      - name: generated files are up to date
        if: ${{ !cancelled() }}
        run: pnpm generate && [ "`git status --porcelain=v1`" == "" ]

  # this is the test matrix, it runs with node18 and 20
  test:
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: [18]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - node: 20
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: install pnpm
        shell: bash
        run: |
          PNPM_VER=$(jq -r '.packageManager | if .[0:5] == "pnpm@" then .[5:] else "packageManager in package.json does not start with pnpm@\n" | halt_error(1)  end' package.json)
          echo installing pnpm version $PNPM_VER
          npm i -g pnpm@$PNPM_VER
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      - name: install
        run: |
          pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
      - name: run tests
        run: pnpm test
